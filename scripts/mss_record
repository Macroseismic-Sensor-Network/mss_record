#! /usr/bin/env python3

# -*- coding: utf-8 -*-
# LICENSE
#
# This file is part of mss_record.
#
# If you use mss_record in any program or publication, please inform and
# acknowledge its author Stefan Mertl (stefan@mertl-research.at).
#
# mss_record is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import argparse
import configparser
import logging
import logging.handlers
import multiprocessing
import os
import signal
import sys
import threading
import time
import traceback

import mss_record.core.recorder
import mss_record.version

class MultiProcessingLog(logging.Handler):
    def __init__(self, filename, maxBytes, backupCount):
        logging.Handler.__init__(self)

        self._handler = logging.handlers.RotatingFileHandler(filename,
                                                             maxBytes = maxBytes,
                                                             backupCount = backupCount)
        self.queue = multiprocessing.Queue(-1)

        t = threading.Thread(target=self.receive)
        t.daemon = True
        t.start()

    def setFormatter(self, fmt):
        logging.Handler.setFormatter(self, fmt)
        self._handler.setFormatter(fmt)

    def receive(self):
        while True:
            try:
                record = self.queue.get()
                self._handler.emit(record)
            except (KeyboardInterrupt, SystemExit):
                raise
            except EOFError:
                break
            except:
                traceback.print_exc(file=sys.stderr)

    def send(self, s):
        self.queue.put_nowait(s)

    def _format_record(self, record):
        # ensure that exc_info and args
        # have been stringified.  Removes any chance of
        # unpickleable things inside and possibly reduces
        # message size sent over the pipe
        if record.args:
            record.msg = record.msg % record.args
            record.args = None
        if record.exc_info:
            dummy = self.format(record)
            record.exc_info = None

        return record

    def emit(self, record):
        try:
            s = self._format_record(record)
            self.send(s)
        except (KeyboardInterrupt, SystemExit):
            raise
        except:
            self.handleError(record)

    def close(self):
        self._handler.close()
        logging.Handler.close(self)



def get_logger_handler(filename):
    ''' Create a logging format handler.
    '''
    ch = MultiProcessingLog(filename, maxBytes = 10000000, backupCount = 10)
    formatter = logging.Formatter("#LOG# - %(asctime)s - %(process)d - %(threadName)s - %(levelname)s - %(name)s: %(message)s")
    ch.setFormatter(formatter)

    return ch


def load_configuration(filename):
    ''' Load the configuration from a file.
    '''
    parser = configparser.ConfigParser()
    parser.read(filename)

    config = {}
    config['log'] = {}
    config['log']['dir'] = parser.get('log', 'log_dir').strip()
    config['log']['filename'] = parser.get('log', 'log_filename').strip()
    config['log']['level'] = parser.get('log', 'log_level').strip()

    config['channel'] = {}
    config['channel']['001'] = {'gain': parser.get('channel', 'gain_channel_001').strip()}
    config['channel']['002'] = {'gain': parser.get('channel', 'gain_channel_002').strip()}
    config['channel']['003'] = {'gain': parser.get('channel', 'gain_channel_003').strip()}

    config['record'] = {}
    config['record']['write_interval'] = int(parser.get('record', 'write_interval').strip())

    # Set the values which are fixed.
    config['station'] = {}
    config['station']['network'] = 'XX'
    config['station']['station_code'] = ''
    config['station']['location'] = '00'


    return config


def get_serial(config, logger):
    '''
    '''
    is_valid = True
    serial_filepath = '/home/mss/config/mss_serial'
    serial = ''
    with open(serial_filepath, 'r') as fid:
        serial = fid.readline().strip()
        config['station']['station_code'] = serial

    if not serial:
        logger.error("The serial number couldn't be read from the file %s.", serial_filepath)
        is_valid = False

    if len(serial) != 5:
        logger.error("The serial number has to be 5 characters long.")
        is_valid = False

    return is_valid


def validate_config(config, logger):
    ''' Validate the elements loaded from the config file.
    '''
    is_valid = True
    if len(config['station']['network']) > 2:
        logger.error("The network has to be max. 2 characters long.")
        is_valid = False

    if not config['station']['station_code']:
        logger.error("You have to specify a station code.")
        is_valid = False

    if len(config['station']['station_code']) > 5:
        logger.error("The station code has to be max. 5 characters long.")
        is_valid = False

    if len(config['station']['location']) > 2:
        logger.error("The station location has to be max. 2 characters long.")
        is_valid = False

    if not config['record']['write_interval']:
        logger.error("You have to specify a write interval.")
        is_valid = False

    return is_valid


if __name__ == '__main__':
    def signal_handler(signum, frame):
        if signum == signal.SIGINT:
            logger.info("Stopping the recorder.")
            recorder.stop()
            logger.info('Exiting program.')
            sys.exit(0)
        elif signum == signal.SIGALRM:
            logger.warning("Watchdog alarm: stopping the recorder.")
            recorder.stop()
            logger.warning('Exiting program.')
            sys.exit(1)
        else:
            logger.info("Got unintended signal: %d.")


    # Handle signals.
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGALRM, signal_handler)
    signal.alarm(60)

    # Specify the configuration file using argpars.
    parser = argparse.ArgumentParser(description = 'mss_record')

    parser.add_argument('config_file', help = 'The path to the configuration file.',
                        type = str)

    parser.add_argument('-v', '--version', action = 'version',
                        version = "%(prog)s " + mss_record.__version__ + " ## " + mss_record.version.__git_version__,
                        help = 'Output the program version')

    args = parser.parse_args()

    # Read the INI formatted configuration file using configparser.
    config = load_configuration(args.config_file)

    # Setup a rotating file logger.
    log_filename = os.path.join(config['log']['dir'], config['log']['filename'])
    if not os.path.exists(config['log']['dir']):
        os.makedirs(config['log']['dir'])
    logger = logging.getLogger('mss_record')
    logger.setLevel(config['log']['level'])
    logger.addHandler(get_logger_handler(log_filename))

    logger.info("mss_record version %s", mss_record.__version__)
    logger.info("mss_record git_version: %s", mss_record.version.__git_version__)

    # Get the serial number.
    logger.info("Getting the serial number.")
    valid_serial = get_serial(config, logger)
    if not valid_serial:
        logger.error("Error when reading the serial number. Please fix it.")
        time.sleep(0.5)
        sys.exit(1)

    logger.info("Checking the configuration.")
    valid_config = validate_config(config, logger)
    if not valid_config:
        logger.error("There are errors in the config file. Please fix them.")
        # Wait some time to ensure, that the messages are writeen to the log
        # file.
        time.sleep(0.5)
        sys.exit(1)

    logger.info("Starting mss record with configuration: %s.", config)

    # Create the recorder instance.
    recorder = mss_record.core.recorder.Recorder(network = config['station']['network'],
                                                 station = config['station']['station_code'],
                                                 location = config['station']['location'],
                                                 channel_config = config['channel'],
                                                 write_interval = config['record']['write_interval'])

    # Check the system.
    working_servers = recorder.check_ntp()
    if not working_servers:
        logger.error("No working NTP servers found, exiting.")
        time.sleep(0.5)
        sys.exit(1)

    # - access to destination folder for miniseed files
    # - internet connection

    # Interrupt response handler f√ºr die ADC erstellen.
    # Die ADCs mit 860 sps laufen lassen.
    # Eine schnelle I2C clock verwenden.

    # Zeitdauer testen 

    recorder.run()

    while True:
        signal.pause()




